/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch'
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: 'sanity.imagePalette'
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions'
	height?: number
	width?: number
	aspectRatio?: number
}

export type SanityFileAsset = {
	_id: string
	_type: 'sanity.fileAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type Geopoint = {
	_type: 'geopoint'
	lat?: number
	lng?: number
	alt?: number
}

export type Code = {
	_type: 'code'
	filename?: string
	language?:
		| 'javascript'
		| 'typescript'
		| 'html'
		| 'css'
		| 'python'
		| 'bash'
		| 'json'
	code?: string
}

export type Post = {
	_id: string
	_type: 'post'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	publishedAt?: string
	featuredImage?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	excerpt?: string
	content?: Array<
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: 'span'
					_key: string
				}>
				style?: 'normal' | 'h1' | 'h2' | 'h3' | 'blockquote'
				listItem?: 'bullet' | 'number'
				markDefs?: Array<{
					href?: string
					_type: 'link'
					_key: string
				}>
				level?: number
				_type: 'block'
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: 'reference'
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: 'image'
				_key: string
		  }
		| ({
				_key: string
		  } & Code)
	>
}

export type Project = {
	_id: string
	_type: 'project'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	featuredImage?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	images?: Array<{
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
		_key: string
	}>
	liveUrl?: string
	githubUrl?: string
	description?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?:
			| 'normal'
			| 'h1'
			| 'h2'
			| 'h3'
			| 'h4'
			| 'h5'
			| 'h6'
			| 'blockquote'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}>
}

export type SanityImageCrop = {
	_type: 'sanity.imageCrop'
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot'
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageAsset = {
	_id: string
	_type: 'sanity.imageAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData'
	name?: string
	id?: string
	url?: string
}

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata'
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type Slug = {
	_type: 'slug'
	current?: string
	source?: string
}

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityFileAsset
	| Geopoint
	| Code
	| Post
	| Project
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: getMostRecentProjectsQuery
// Query: *[_type == "project"]| order(_updatedAt desc)[0...3]{  _id,  _type,  title,  slug,  featuredImage {    asset->{      url,      metadata {        dimensions {          width,          height        }      }    }  },  images[]{    asset->{      url,      metadata {        dimensions {          width,          height        }      }    }  },  liveUrl,  githubUrl,  description}
export type GetMostRecentProjectsQueryResult = Array<{
	_id: string
	_type: 'project'
	title: string | null
	slug: Slug | null
	featuredImage: {
		asset: {
			url: string | null
			metadata: {
				dimensions: {
					width: number | null
					height: number | null
				} | null
			} | null
		} | null
	} | null
	images: Array<{
		asset: {
			url: string | null
			metadata: {
				dimensions: {
					width: number | null
					height: number | null
				} | null
			} | null
		} | null
	}> | null
	liveUrl: string | null
	githubUrl: string | null
	description: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?:
			| 'blockquote'
			| 'h1'
			| 'h2'
			| 'h3'
			| 'h4'
			| 'h5'
			| 'h6'
			| 'normal'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}> | null
}>
// Variable: getPostsQuery
// Query: *[_type == "post"] | order(publishedAt desc){  _id,  title,  slug,  publishedAt,  featuredImage {    asset->{      url,      metadata {        dimensions {          width,          height        }      }    }  },  excerpt,  content}
export type GetPostsQueryResult = Array<{
	_id: string
	title: string | null
	slug: Slug | null
	publishedAt: string | null
	featuredImage: {
		asset: {
			url: string | null
			metadata: {
				dimensions: {
					width: number | null
					height: number | null
				} | null
			} | null
		} | null
	} | null
	excerpt: string | null
	content: Array<
		| ({
				_key: string
		  } & Code)
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: 'span'
					_key: string
				}>
				style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'normal'
				listItem?: 'bullet' | 'number'
				markDefs?: Array<{
					href?: string
					_type: 'link'
					_key: string
				}>
				level?: number
				_type: 'block'
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: 'reference'
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: 'image'
				_key: string
		  }
	> | null
}>
// Variable: getPostBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  title,  slug,  publishedAt,  featuredImage {    asset->{      url,      metadata {        dimensions {          width,          height        }      }    }  },  excerpt,  content}
export type GetPostBySlugQueryResult = {
	_id: string
	title: string | null
	slug: Slug | null
	publishedAt: string | null
	featuredImage: {
		asset: {
			url: string | null
			metadata: {
				dimensions: {
					width: number | null
					height: number | null
				} | null
			} | null
		} | null
	} | null
	excerpt: string | null
	content: Array<
		| ({
				_key: string
		  } & Code)
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: 'span'
					_key: string
				}>
				style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'normal'
				listItem?: 'bullet' | 'number'
				markDefs?: Array<{
					href?: string
					_type: 'link'
					_key: string
				}>
				level?: number
				_type: 'block'
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: 'reference'
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: 'image'
				_key: string
		  }
	> | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
	interface SanityQueries {
		'*[_type == "project"]| order(_updatedAt desc)[0...3]{\n  _id,\n  _type,\n  title,\n  slug,\n  featuredImage {\n    asset->{\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    }\n  },\n  images[]{\n    asset->{\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    }\n  },\n  liveUrl,\n  githubUrl,\n  description\n}': GetMostRecentProjectsQueryResult
		'*[_type == "post"] | order(publishedAt desc){\n  _id,\n  title,\n  slug,\n  publishedAt,\n  featuredImage {\n    asset->{\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    }\n  },\n  excerpt,\n  content\n}': GetPostsQueryResult
		'*[_type == "post" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  publishedAt,\n  featuredImage {\n    asset->{\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    }\n  },\n  excerpt,\n  content\n}': GetPostBySlugQueryResult
	}
}
